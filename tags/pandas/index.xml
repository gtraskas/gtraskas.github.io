<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on A data science blog</title>
    <link>http://gtraskas.github.io/tags/pandas/</link>
    <description>Recent content in Pandas on A data science blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gtraskas.github.io/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Breast Cancer Analysis and Prediction</title>
      <link>http://gtraskas.github.io/project/project7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gtraskas.github.io/project/project7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Investigate a Dataset</title>
      <link>http://gtraskas.github.io/project/project4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gtraskas.github.io/project/project4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linear Regression</title>
      <link>http://gtraskas.github.io/post/ex1/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gtraskas.github.io/post/ex1/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } });  MathJax.Hub.Queue(function() { // Fix  tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i This post covers the first exercise from Andrew Ng&amp;rsquo;s Machine Learning Course on Coursera.</description>
    </item>
    
    <item>
      <title>Spam or Ham?</title>
      <link>http://gtraskas.github.io/post/spamit/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gtraskas.github.io/post/spamit/</guid>
      <description>Implement a spam filter in Python using the Naive Bayes algorithm to classify the emails as spam or not-spam (a.k.a. ham).
Check Modules Check system for the required dependencies.
import sys dependencies = [&amp;quot;nltk&amp;quot;, &amp;quot;numpy&amp;quot;, &amp;quot;pandas&amp;quot;, &amp;quot;scipy&amp;quot;, &amp;quot;sklearn&amp;quot;, &amp;quot;pickle&amp;quot;, &amp;quot;re&amp;quot;] for module in dependencies: print(&amp;quot;\nChecking for &amp;quot; + module + &amp;quot;...&amp;quot;) try: # Import module from string variable: # https://stackoverflow.com/questions/8718885/import-module-from-string-variable # To import using a variable, call __import__(name) module_obj = __import__(module) # To contain the module, create a global object using globals() globals()[module] = module_obj except ImportError: print(&amp;quot;Install &amp;quot; + module + &amp;quot; before continuing&amp;quot;) print(&amp;quot;In a terminal type the following commands:&amp;quot;) print(&amp;quot;python get-pip.</description>
    </item>
    
  </channel>
</rss>